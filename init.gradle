def removeList = [
        'jcenter.bintray.com',
        'maven.google.com',
        'plugins.gradle.org/m2',
        'repo.maven.apache.org',
        'repo1.maven.org/maven2',
        'repository.apache.org/snapshots',
        'repo.spring.io/libs-milestone',
        'repo.spring.io/plugins-release',
        'repo.grails.org/grails/core'
]
def mirrorList = [
        'https://mirrors.cloud.tencent.com/nexus/repository/maven-public/',
        'https://maven.aliyun.com/repository/central',
        'https://maven.aliyun.com/repository/jcenter',
        'https://maven.aliyun.com/repository/google',
        'https://maven.aliyun.com/repository/gradle-plugin',
        'https://maven.aliyun.com/repository/releases',
        'https://maven.aliyun.com/repository/spring',
        'https://maven.aliyun.com/repository/spring-plugin',
        'https://maven.aliyun.com/repository/grails-core',
        'https://maven.aliyun.com/repository/apache-snapshots'
]


def SettingsRepoConfig = (RepositoryHandler repo, readonly = false) -> {
    if (readonly) {
        println('gradle init: [settingsRepoConfig] readonly mode for preview changes')
    }

    def removeLater = []
    repo.each {
        // if (readonly)
        println("gradle init: [settingsRepoConfig] Repo:(${it.name}: ${it.url})")
        def url = it.url.toString()
        removeList.each(str -> {
            if (url.contains(str)) {
                removeLater.add(it)
                println("gradle init: [settingsRepoConfig] (${it.name}: ${it.url}) removed")
            }
        })
    }
    if (!readonly) {
        removeLater.each { repo.remove(it) }
        mirrorList.each {
            repo.add(repo.maven { url "$url" })
        }
    }
}


def RepoConfig = {
    all { ArtifactRepository repo ->
        if (repo instanceof MavenArtifactRepository) {
            var url = repo.url.toString()
            removeList.each {
                if (!url.contains(it))
                    return
                remove(repo)
                println("gradle init: [buildscript.repositories] (${repo.name}: ${repo.url}) removed")
            }
        }
    }
}

def AddMirrors = repo -> {
    mirrorList.each {
        var repo_obj = repo.maven {}
        repo_obj.setUrl(URI.create(it))
        repo.add(repo_obj)
        println("Add: ${repo_obj.url}")
    }
}

settingsEvaluated {
    it.pluginManagement {
        repositories(SettingsRepoConfig)
        AddMirrors(repositories)
    }
    it.dependencyResolutionManagement {
        repositories(SettingsRepoConfig)
        AddMirrors(repositories)
    }
}

allprojects {
    buildscript {
        repositories(RepoConfig)
        AddMirrors(repositories)
    }
    repositories(RepoConfig)
    AddMirrors(repositories)
}
