var LinkedHashMap<String, String> replaceDict = //
        ["jcenter.bintray.com"            : "https://maven.aliyun.com/repository/jcenter",//
         "maven.google.com"               : "https://maven.aliyun.com/repository/google",//
         "plugins.gradle.org/m2"          : "https://maven.aliyun.com/repository/gradle-plugin",//
//         "repo.maven.apache.org/maven2/"  : "https://maven.aliyun.com/mvn/search",//
         "repo.maven.apache.org/maven2"   : "https://maven.aliyun.com/repository/central",//
         "repo1.maven.org/maven2"         : "https://maven.aliyun.com/repository/central",//
         "repository.apache.org/snapshots": "https://maven.aliyun.com/repository/apache-snapshots",//

         "repo.grails.org/grails/core"    : "https://maven.aliyun.com/repository/grails-core",//

         "repo.spring.io/libs-milestone"  : "https://maven.aliyun.com/repository/spring",//
         "repo.spring.io/plugins-release" : "https://maven.aliyun.com/repository/spring-plugin",//
        ]
var ArrayList<String> appendList = []


var logTag = "init.gradle"
println("[$logTag]")

var repoConfig = { RepositoryHandler handler ->
    configureEach { ArtifactRepository repo ->
        if (!repo.hasProperty('url')) return
        var repo_url = repo.url.toString()
        logger.info("[$logTag] \t${repo.name}(\"$repo_url\")")
        replaceDict.forEach { k, v ->
            if (!repo_url.contains(k)) return
            println("[$logTag] ${repo.name}(\"${repo.url}\") -> $v")
            repo.setUrl(URI.create(v))
        }
    }
}

settingsEvaluated {
    it.pluginManagement {
        repositories(repoConfig)
    }
    it.dependencyResolutionManagement {
        repositories(repoConfig)
    }
}

allprojects {
    buildscript {
        repositories(repoConfig)
    }
    repositories(repoConfig)
}
