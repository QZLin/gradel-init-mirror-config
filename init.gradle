var removeList = ['jcenter.bintray.com',
                  'maven.google.com',
                  'plugins.gradle.org/m2',
                  'repo.maven.apache.org',
                  'repo1.maven.org/maven2',
                  'repository.apache.org/snapshots',
                  'repo.spring.io/libs-milestone',
                  'repo.spring.io/plugins-release',
                  'repo.grails.org/grails/core']
var mirrorList = ['https://mirrors.cloud.tencent.com/nexus/repository/maven-public/',
                  'https://maven.aliyun.com/repository/central',
//        'https://maven.aliyun.com/repository/jcenter',
                  'https://maven.aliyun.com/repository/google',
                  'https://maven.aliyun.com/repository/gradle-plugin',
                  'https://maven.aliyun.com/repository/releases',
//        'https://maven.aliyun.com/repository/spring',
//        'https://maven.aliyun.com/repository/spring-plugin',
//        'https://maven.aliyun.com/repository/grails-core',
//        'https://maven.aliyun.com/repository/apache-snapshots'
]


def SettingsRepoConfig = (RepositoryHandler repo) -> {
    var removeLater = []
    repo.each { ArtifactRepository it ->
        println("gradle init: [SettingsRepoConfig] check (${it.name}: ${it.url})")
        def url = it.url.toString()
        removeList.each(pattern -> {
            if (url.contains(pattern)) {
                removeLater.add(it)
            }
        })
    }
    removeLater.each {
        repo.remove(it)
        println("gradle init: [SettingsRepoConfig] remove (${it.name}: ${it.url})")

    }
    mirrorList.each {
        var repoObject = repo.maven {}
        repoObject.url = URI.create(it)
        repo.add(repoObject)
        println("gradle init: [SettingsRepoConfig] add (${repoObject.name}: ${repoObject.url})")
    }

}


def repoConfig = {
    configureEach { ArtifactRepository repo ->
        if (!repo instanceof MavenArtifactRepository) return
        if (!repo.hasProperty('url')) return
        var url = repo.url.toString()
        removeList.each {
            if (!url.contains(it)) return
            remove(repo)
            println("gradle init: [buildscript.repositories] (${repo.name}: ${repo.url}) removed")
        }

    }
}

def AddMirrors = repo -> {
    mirrorList.each {
        var repo_obj = repo.maven {}
        repo_obj.setUrl(URI.create(it))
        repo.add(repo_obj)
        println("Add: ${repo_obj.url}")
    }
}

settingsEvaluated {
    it.pluginManagement {
        repositories(SettingsRepoConfig)
    }
    it.dependencyResolutionManagement {
        repositories(SettingsRepoConfig)
    }
}

allprojects {
    buildscript {
        repositories(RepoConfig)
        AddMirrors(repositories)
    }
    repositories(RepoConfig)
    AddMirrors(repositories)
}
